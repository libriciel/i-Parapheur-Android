apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'io.fabric'


buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.0'
        classpath 'org.jacoco:org.jacoco.core:0.8.3'
        //noinspection GradleDynamicVersion
        classpath 'io.fabric.tools:gradle:1.+'
    }
}


repositories {
    google()
    mavenCentral()
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
}


android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    // Every muPDF lib build is quite heavy. Some day, we might want to reduce the app size, splitting it in 4.
    // But it will be more complex to deal with the Google Play distribution... Right now we keep the universal APK.
    // splits {
    //    abi {
    //        enable true
    //        reset()
    //        include 'armeabi-v7a' // 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'arm64-v8a'
    //        universalApk false
    //    }
    // }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}


dependencies {

    androidTestImplementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support:multidex:1.0.2'

    testImplementation 'junit:junit:4.12'
    testImplementation 'androidx.test:core:1.1.0'
    testImplementation 'org.robolectric:robolectric:4.2'
    // https://github.com/jayway/powermock/wiki/MockitoUsage for PowerMock/Mockito compatibility chart
    testImplementation 'org.mockito:mockito-core:2.23.0'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.0-beta.5'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.0-beta.5'
    testImplementation 'org.powermock:powermock-core:2.0.0-beta.5'
    testImplementation 'org.powermock:powermock-module-junit4-rule:2.0.0-beta.5'

    compileOnly 'org.projectlombok:lombok:1.18.6'
    annotationProcessor 'org.projectlombok:lombok:1.18.6'

    implementation 'com.android.support:support-v13:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.madgag.spongycastle:core:1.53.0.0'
    implementation 'com.madgag.spongycastle:pkix:1.53.0.0'
    implementation 'com.j256.ormlite:ormlite-core:5.0'
    implementation 'com.j256.ormlite:ormlite-android:5.0'
    implementation files('libs/android-sun-jarsign-support-1.1.jar')
    implementation files('libs/mupdf-android-1.1.0.aar')
    implementation('com.crashlytics.sdk.android:crashlytics:2.5.2@aar') {
        transitive = true;
    }
}


task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = false
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/compileDebugJavaWithJavac/classes", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"
    ])
}


tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}
